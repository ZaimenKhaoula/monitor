/**
 * JavaCC template file created by SF JavaCC plugin 1.5.28+ wizard for JavaCC 1.5.0+
 */options{ static = false;
 IGNORE_CASE = true;}PARSER_BEGIN(Analyseur)package TaskGeneration;

import Tasks.*;

public class Analyseur{
private  int idCounter = 0;

}PARSER_END(Analyseur)SKIP :
{
  " "
| "\r"
| "\t"
| "\n"


}


TOKEN : /* OPERATORS */
{
  < operateur : "+" |"-"|"*"| "/"|"<"|">"|"=" >
| < fonction: "min"|"max"|"mean" > 
| < sym : "." |";"|"\"">
| < parenthO:"(" >
| < parenthF: ")" >
| < virgule:"," >
| < separateur:":" | "%" >
| < grammarkeyWords :"Rythme de collecte"|"type"|"params"|"service"|"loop"|"id"|"metriName">
| < accoladO: "{" >
| < accoladF: "}" >
| < RTT:"RTT">
| < timeUnit:"us"|"ms"|"s"|"min"|"h"|"jr" >
| <periodic : "periodic" >
| < stochastic :"stochastic" >
|< time_serie: "time-serie">
| <createM :"CreateMonitor" >
| <updateM: "UpdateMonitor" >
| <createN : "CreateNotifier" >
| < loi : "uniform"| "exponential" >
| < Metric : "NbReqSent" |"NbRespSent" | "NBTopicSubscription"| "NbPublishedMsg" >

}

TOKEN :
{
  < number : (< DIGIT >)+(<sym>(<DIGIT>)+)? >
| < #DIGIT : [ "0"-"9" ] >
| < alpha :(["a"-"z", "A"-"Z"]) >
}

TOKEN :
{
 < AppName : <grammarkeyWords><number>>
| < MetricName: (<alpha>)+<number> >
| < param: (<alpha >|< number >)+ >

| <Id:((<alpha>|<DIGIT>)+<sym>)+<Metric>>
| <Idms:((<alpha>|<DIGIT>)+<sym>)+ (<alpha>|<DIGIT>)+>
| < url:("http" | "https")(<alpha>|<DIGIT>|<operateur>|<sym>|<accoladO>|<accoladF>|<sym>)+ (<alpha>)+>
}
void start () : {} { CreateMonitoringResource()|UpdateMonitoringResource()|CreateNotifierResource() }


UpdateMonitor UpdateMonitoringResource(): {
  UpdateMonitor task = new UpdateMonitor();
  Token tok1=null;
  Token tok2=null;}
   {
<updateM>tok1=<Id> {task.setMetricName(tok1.toString());}
<grammarkeyWords ><sym><operateur><grammarkeyWords> 
(tok1=<periodic>{task.createRate(tok1.toString());}<grammarkeyWords><accoladO>tok2=<number> { task.getRate().getParameters().add(tok2.toString());}tok2=<timeUnit> { task.getRate().getParameters().add(tok2.toString());}<accoladF>
|tok1=<stochastic>{task.createRate(tok1.toString());}
<grammarkeyWords><accoladO>tok2=<loi > { ((StochasticRate)(task.getRate())).setLoi( tok2.toString());}(tok2=<number> { task.getRate().getParameters().add(tok2.toString());}tok2=<timeUnit> { task.getRate().getParameters().add(tok2.toString());})+<accoladF>
|tok1=<time_serie>{task.createRate(tok1.toString());}
<grammarkeyWords><accoladO>(tok2=<number> { task.getRate().getParameters().add(tok2.toString());}tok2=<timeUnit> { task.getRate().getParameters().add(tok2.toString());})+(<grammarkeyWords>)?<accoladF>)

{return task;}}

 
   


CreateNotifier CreateNotifierResource():{
Token tok1= null;
CreateNotifier task = new CreateNotifier();} {

<createN>{task.setId("notifier"+idCounter); idCounter++;}<operateur>tok1=<MetricName> {task.getExpression().add(tok1.toString());task.getMetrics().add(tok1.toString());}
(tok1=<operateur> { task.getExpression().add(tok1.toString());}(tok1=<number> { task.getExpression().add(tok1.toString());}|tok1=<MetricName> {task.getExpression().add(tok1.toString());task.getMetrics().add(tok1.toString());} ))+
 <grammarkeyWords>tok1=<url> { task.setUrl(tok1.toString());} 
 {return task; } }


// we can read the value of admin metric(global metric) or internal metric ,
// a get operation on internal metric enables it if it was disabled.
ReadMonitor ReadMonitoringResource():{
Token tok1= null;
ReadMonitor task = new ReadMonitor();} {
 tok1=<MetricName> {task.setMetricName(tok1.toString());}|
tok1=<Id>{task.setInternalMetricUniqueIdentifier(tok1.toString());task.setInternalMetric(true);}
 
 {return task; } }
   

CreateMonitor CreateMonitoringResource(): {
  Token tok1 =null;
  Token tok2 =null;
  CreateMonitor task= new CreateMonitor();
  Counter counter = new Counter();
  RTT rtt= new RTT();}
  {
     <createM><grammarkeyWords>tok1=<MetricName> {task.getAdminmetric().setMetricName(tok1.toString()); task.setId(tok1.toString());}
    <operateur>

    ((tok1=<number> {task.getExpression().add(tok1.toString());}|(tok1=<Id> {counter.setIdMs(tok1.toString());
     task.getAdminmetric().setType("counter");
     task.getExpression().add(counter.getIdMs()+"."+counter.getMetricName()); task.getAdminmetric().getMetrics().add(counter);})
    (tok1=<operateur> {task.getExpression().add(tok1.toString());}(tok1=<number> {task.getExpression().add(tok1.toString());}
    |tok1=<Id>{counter.setIdMs(tok1.toString()); 
     task.getExpression().add(counter.getIdMs()+"."+counter.getMetricName()); task.getAdminmetric().getMetrics().add(counter);}))*)
    |
 
(
(tok1=<fonction>{System.out.println(tok1.toString()); task.getExpression().add(tok1.toString());}tok1=<parenthO>{System.out.println(tok1.toString());task.getExpression().add(tok1.toString());})?
((tok1=<fonction>{System.out.println(tok1.toString());task.getExpression().add(tok1.toString());} tok1=<parenthO>{System.out.println(tok1.toString());task.getExpression().add(tok1.toString());})?
((tok1=<number>{task.getExpression().add(tok1.toString());}|(<RTT><separateur>tok1=<Idms> {System.out.println(tok1.toString());rtt.setIDusSource(tok1.toString()); (task.getAdminmetric()).setType("rtt");}<separateur>tok1=<Idms>
{System.out.println(tok1.toString());rtt.setIDusDestination(tok1.toString());} {(task.getExpression()).add(rtt.toString());}{((task.getAdminmetric()).getMetrics()).add(rtt);}))
(tok1=<operateur>{System.out.println(tok1.toString());task.getExpression().add(tok1.toString());} (tok1=<number>{task.getExpression().add(tok1.toString());}|
(<RTT><separateur>tok1=<Idms> {System.out.println(tok1.toString());rtt.setIDusSource(tok1.toString());}<separateur>tok1=<Idms>
{System.out.println(tok1.toString());rtt.setIDusDestination(tok1.toString());} {task.getExpression().add(rtt.toString());}{(task.getAdminmetric()).getMetrics().add(rtt);})))*
(tok1=<virgule> {System.out.println(tok1.toString()); task.getExpression().add(tok1.toString());})?)+//hna
(tok1=<parenthF>{System.out.println(tok1.toString());task.getExpression().add(tok1.toString());System.out.println("hadi kafal bifa");})?
(tok1=<virgule> {System.out.println(tok1.toString()); task.getExpression().add(tok1.toString());})?)+
(tok1=<parenthF>{System.out.println(tok1.toString());task.getExpression().add(tok1.toString());})?
({System.out.println("dkhal l operateur tania"); }tok1=<operateur>{task.getExpression().add(tok1.toString());} (tok1=<number>{task.getExpression().add(tok1.toString());}|(
(tok1=<fonction>{task.getExpression().add(tok1.toString());})?(tok1=<parenthO>{task.getExpression().add(tok1.toString());})?
((tok1=<fonction>{task.getExpression().add(tok1.toString());})?(tok1=<parenthO>{task.getExpression().add(tok1.toString());})?
((tok1=<number>{task.getExpression().add(tok1.toString());}|(<RTT><separateur>tok1=<Idms> {rtt.setIDusSource(tok1.toString());}<separateur>tok1=<Idms>
{rtt.setIDusDestination(tok1.toString());} {task.getExpression().add(rtt.toString());}{task.getAdminmetric().getMetrics().add(rtt);}))
(tok1=<operateur>{task.getExpression().add(tok1.toString());} (tok1=<number>{task.getExpression().add(tok1.toString());}|
(<RTT><separateur>tok1=<Idms> {rtt.setIDusSource(tok1.toString());}<separateur>tok1=<Idms>
{rtt.setIDusDestination(tok1.toString());} {task.getExpression().add(rtt.toString());}{task.getAdminmetric().getMetrics().add(rtt);})))*
/*tok1=<virgule> {System.out.println(tok1.toString()); task.getExpression().add(tok1.toString());}*/)+
(tok1=<parenthF>{task.getExpression().add(tok1.toString());})?)+
(tok1=<virgule> {System.out.println(tok1.toString()); task.getExpression().add(tok1.toString());})?
(tok1=<parenthF>{task.getExpression().add(tok1.toString());})?))+
)*) 


    
    )<separateur>

     <grammarkeyWords><operateur><grammarkeyWords> 
    (tok1=<periodic>{task.createRate(tok1.toString());}<grammarkeyWords><accoladO>tok2=<number> { System.out.println(tok2.toString());task.getRate().getParameters().add(tok2.toString());}tok2=<timeUnit> { System.out.println(tok2.toString());task.getRate().getParameters().add(tok2.toString());}<accoladF>
|  tok1=<stochastic>{task.createRate(tok1.toString());}
<grammarkeyWords><accoladO>tok2=<loi > { ((StochasticRate)(task.getRate())).setLoi( tok2.toString());}(tok2=<number> { task.getRate().getParameters().add(tok2.toString());}tok2=<timeUnit> { task.getRate().getParameters().add(tok2.toString());})+<accoladF>
| tok1=<time_serie>{task.createRate(tok1.toString());}
<grammarkeyWords><accoladO>(tok2=<number> { task.getRate().getParameters().add(tok2.toString());}tok2=<timeUnit> { task.getRate().getParameters().add(tok2.toString());})+(<grammarkeyWords>)?<accoladF>)

  
{return task;}

}


